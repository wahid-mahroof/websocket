'use strict';

var fs = require('node:fs');
var os = require('node:os');
var path = require('node:path');
var process = require('node:process');
var registryConstants = require('@socketsecurity/registry/lib/constants');
var env = require('@socketsecurity/registry/lib/env');

const {
  NODE_MODULES,
  NPM,
  NPX,
  PACKAGE_JSON,
  SOCKET_SECURITY_SCOPE,
  kInternalsSymbol,
  [kInternalsSymbol]: {
    createConstantsObject
  }
} = registryConstants;
const SOCKET = 'socket';
const WITH_SENTRY = 'with-sentry';
const ALERT_TYPE_CRITICAL_CVE = 'criticalCVE';
const ALERT_TYPE_CVE = 'cve';
const ALERT_TYPE_MEDIUM_CVE = 'mediumCVE';
const ALERT_TYPE_MILD_CVE = 'mildCVE';
const ALERT_TYPE_SOCKET_UPGRADE_AVAILABLE = 'socketUpgradeAvailable';
const API_V0_URL = 'https://api.socket.dev/v0';
const BINARY_LOCK_EXT = '.lockb';
const BUN = 'bun';
const CLI = 'cli';
const CVE_ALERT_PROPS_FIRST_PATCHED_VERSION_IDENTIFIER = 'firstPatchedVersionIdentifier';
const CVE_ALERT_PROPS_VULNERABLE_VERSION_RANGE = 'vulnerableVersionRange';
const DRY_RUN_LABEL = '[DryRun]';
const DRY_RUN_BAIL_TEXT = `${DRY_RUN_LABEL}: Bailing now`;
const LOCK_EXT = '.lock';
const MODULE_SYNC = 'module-sync';
const NPM_REGISTRY_URL = 'https://registry.npmjs.org';
const PNPM = 'pnpm';
const REDACTED = '<redacted>';
const REQUIRE = 'require';
const SHADOW_NPM_BIN = 'shadow-bin';
const SHADOW_NPM_INJECT = 'shadow-npm-inject';
const SHADOW_NPM_PATHS = 'shadow-npm-paths';
const SOCKET_CLI_BIN_NAME = SOCKET;
const SOCKET_CLI_BIN_NAME_ALIAS = CLI;
const SOCKET_CLI_DEBUG = 'SOCKET_CLI_DEBUG';
const SOCKET_CLI_FIX = 'SOCKET_CLI_FIX';
const SOCKET_CLI_ISSUES_URL = 'https://github.com/SocketDev/socket-cli/issues';
const SOCKET_CLI_LEGACY_BUILD = 'SOCKET_CLI_LEGACY_BUILD';
const SOCKET_CLI_LEGACY_PACKAGE_NAME = `${SOCKET_SECURITY_SCOPE}/${CLI}`;
const SOCKET_CLI_NO_API_TOKEN = 'SOCKET_CLI_NO_API_TOKEN';
const SOCKET_CLI_OPTIMIZE = 'SOCKET_CLI_OPTIMIZE';
const SOCKET_CLI_NPM_BIN_NAME = `${SOCKET}-${NPM}`;
const SOCKET_CLI_NPX_BIN_NAME = `${SOCKET}-${NPX}`;
const SOCKET_CLI_PACKAGE_NAME = SOCKET;
const SOCKET_CLI_PUBLISHED_BUILD = 'SOCKET_CLI_PUBLISHED_BUILD';
const SOCKET_CLI_SAFE_WRAPPER = 'SOCKET_CLI_SAFE_WRAPPER';
const SOCKET_CLI_SENTRY_BIN_NAME = `${SOCKET_CLI_BIN_NAME}-${WITH_SENTRY}`;
const SOCKET_CLI_SENTRY_BIN_NAME_ALIAS = `${SOCKET_CLI_BIN_NAME_ALIAS}-${WITH_SENTRY}`;
const SOCKET_CLI_SENTRY_BUILD = 'SOCKET_CLI_SENTRY_BUILD';
const SOCKET_CLI_SENTRY_NPM_BIN_NAME = `${SOCKET_CLI_NPM_BIN_NAME}-${WITH_SENTRY}`;
const SOCKET_CLI_SENTRY_NPX_BIN_NAME = `${SOCKET_CLI_NPX_BIN_NAME}-${WITH_SENTRY}`;
const SOCKET_CLI_SENTRY_PACKAGE_NAME = `${SOCKET_CLI_LEGACY_PACKAGE_NAME}-${WITH_SENTRY}`;
const SOCKET_CLI_SHOW_BANNER = 'SOCKET_CLI_SHOW_BANNER';
const SOCKET_CLI_VERSION_HASH = 'SOCKET_CLI_VERSION_HASH';
const VLT = 'vlt';
const YARN = 'yarn';
const YARN_BERRY = `${YARN}/berry`;
const YARN_CLASSIC = `${YARN}/classic`;
let _Sentry;
const LAZY_BATCH_PURL_ENDPOINT = () => {
  const query = new URLSearchParams();
  query.append('alerts', 'true');
  query.append('compact', 'true');
  return `${API_V0_URL}/purl?${query}`;
};
const LAZY_DIST_TYPE = () => registryConstants.SUPPORTS_NODE_REQUIRE_MODULE ? MODULE_SYNC : REQUIRE;
const LAZY_ENV = () => {
  const {
    env: env$1
  } = process;
  // We inline some environment values so that they CANNOT be influenced by user
  // provided environment variables.
  return Object.freeze({
    // Lazily access registryConstants.ENV.
    ...registryConstants.ENV,
    // Flag set to help debug Socket CLI.
    [SOCKET_CLI_DEBUG]: env.envAsBoolean(env$1[SOCKET_CLI_DEBUG]),
    // Inlined flag set to determine if this is the Legacy build.
    // The '@rollup/plugin-replace' will replace "process.env[SOCKET_CLI_LEGACY_BUILD]".
    [SOCKET_CLI_LEGACY_BUILD]: false,
    // Flag set to make the default API token `undefined`.
    [SOCKET_CLI_NO_API_TOKEN]: env.envAsBoolean(env$1[SOCKET_CLI_NO_API_TOKEN]),
    // Inlined flag set to determine if this is a published build.
    // The '@rollup/plugin-replace' will replace "process.env[SOCKET_CLI_PUBLISHED_BUILD]".
    [SOCKET_CLI_PUBLISHED_BUILD]: true,
    // Inlined flag set to determine if this is the Sentry build.
    // The '@rollup/plugin-replace' will replace "process.env[SOCKET_CLI_SENTRY_BUILD]".
    [SOCKET_CLI_SENTRY_BUILD]: false,
    // Flag set to toggle the informative ASCII art banner.
    [SOCKET_CLI_SHOW_BANNER]: env.envAsBoolean(env$1[SOCKET_CLI_SHOW_BANNER]),
    // Inlined flag set to determine the version hash of the build.
    // The '@rollup/plugin-replace' will replace "process.env[SOCKET_CLI_VERSION_HASH]".
    [SOCKET_CLI_VERSION_HASH]: "0.14.57:6783de7:152f4f94:pub"
  });
};
const lazyBashRcPath = () =>
// Lazily access constants.homePath.
path.join(constants.homePath, '.bashrc');
const lazyDistCliPath = () =>
// Lazily access constants.distPath.
path.join(constants.distPath, 'cli.js');
const lazyDistInstrumentWithSentryPath = () =>
// Lazily access constants.rootDistPath.
path.join(constants.rootDistPath, 'instrument-with-sentry.js');
const lazyDistPath = () =>
// Lazily access constants.rootDistPath and constants.DIST_TYPE.
path.join(constants.rootDistPath, constants.DIST_TYPE);
const lazyDistShadowNpmBinPath = () =>
// Lazily access constants.distPath.
path.join(constants.distPath, `${SHADOW_NPM_BIN}.js`);
const lazyDistShadowNpmInjectPath = () =>
// Lazily access constants.distPath.
path.join(constants.distPath, `${SHADOW_NPM_INJECT}.js`);
const lazyHomePath = () => os.homedir();
const lazyNmBinPath = () =>
// Lazily access constants.rootPath.
path.join(constants.rootPath, `${NODE_MODULES}/.bin`);
const lazyRootBinPath = () =>
// Lazily access constants.rootPath.
path.join(constants.rootPath, 'bin');
const lazyRootDistPath = () =>
// Lazily access constants.rootPath.
path.join(constants.rootPath, 'dist');
const lazyRootPath = () =>
// The '@rollup/plugin-replace' will replace "process.env.['VITEST']" with `false` and
// it will be dead code eliminated by Rollup.
path.join(fs.realpathSync.native(__dirname), '..');
const lazyRootPkgJsonPath = () =>
// Lazily access constants.rootPath.
path.join(constants.rootPath, PACKAGE_JSON);
const lazyShadowBinPath = () =>
// Lazily access constants.rootPath.
path.join(constants.rootPath, SHADOW_NPM_BIN);
const lazyZshRcPath = () =>
// Lazily access constants.homePath.
path.join(constants.homePath, '.zshrc');
const constants = createConstantsObject({
  ALERT_TYPE_CRITICAL_CVE,
  ALERT_TYPE_CVE,
  ALERT_TYPE_MEDIUM_CVE,
  ALERT_TYPE_MILD_CVE,
  ALERT_TYPE_SOCKET_UPGRADE_AVAILABLE,
  API_V0_URL,
  // Lazily defined values are initialized as `undefined` to keep their key order.
  BATCH_PURL_ENDPOINT: undefined,
  BINARY_LOCK_EXT,
  BUN,
  CLI,
  CVE_ALERT_PROPS_FIRST_PATCHED_VERSION_IDENTIFIER,
  CVE_ALERT_PROPS_VULNERABLE_VERSION_RANGE,
  DIST_TYPE: undefined,
  DRY_RUN_LABEL,
  DRY_RUN_BAIL_TEXT,
  ENV: undefined,
  LOCK_EXT,
  MODULE_SYNC,
  NPM_REGISTRY_URL,
  PNPM,
  REDACTED,
  REQUIRE,
  SHADOW_NPM_BIN,
  SHADOW_NPM_INJECT,
  SHADOW_NPM_PATHS,
  SOCKET,
  SOCKET_CLI_BIN_NAME,
  SOCKET_CLI_BIN_NAME_ALIAS,
  SOCKET_CLI_DEBUG,
  SOCKET_CLI_FIX,
  SOCKET_CLI_ISSUES_URL,
  SOCKET_CLI_SENTRY_BIN_NAME_ALIAS,
  SOCKET_CLI_LEGACY_BUILD,
  SOCKET_CLI_LEGACY_PACKAGE_NAME,
  SOCKET_CLI_NO_API_TOKEN,
  SOCKET_CLI_OPTIMIZE,
  SOCKET_CLI_PACKAGE_NAME,
  SOCKET_CLI_PUBLISHED_BUILD,
  SOCKET_CLI_SAFE_WRAPPER,
  SOCKET_CLI_SENTRY_BIN_NAME,
  SOCKET_CLI_SENTRY_BUILD,
  SOCKET_CLI_SENTRY_NPM_BIN_NAME,
  SOCKET_CLI_SENTRY_NPX_BIN_NAME,
  SOCKET_CLI_SENTRY_PACKAGE_NAME,
  SOCKET_CLI_SHOW_BANNER,
  SOCKET_CLI_VERSION_HASH,
  VLT,
  WITH_SENTRY,
  YARN,
  YARN_BERRY,
  YARN_CLASSIC,
  bashRcPath: undefined,
  distCliPath: undefined,
  distInstrumentWithSentryPath: undefined,
  distPath: undefined,
  distShadowNpmBinPath: undefined,
  distShadowNpmInjectPath: undefined,
  homePath: undefined,
  nmBinPath: undefined,
  rootBinPath: undefined,
  rootDistPath: undefined,
  rootPath: undefined,
  rootPkgJsonPath: undefined,
  shadowBinPath: undefined,
  zshRcPath: undefined
}, {
  getters: {
    BATCH_PURL_ENDPOINT: LAZY_BATCH_PURL_ENDPOINT,
    DIST_TYPE: LAZY_DIST_TYPE,
    ENV: LAZY_ENV,
    bashRcPath: lazyBashRcPath,
    distCliPath: lazyDistCliPath,
    distInstrumentWithSentryPath: lazyDistInstrumentWithSentryPath,
    distPath: lazyDistPath,
    distShadowNpmBinPath: lazyDistShadowNpmBinPath,
    distShadowNpmInjectPath: lazyDistShadowNpmInjectPath,
    homePath: lazyHomePath,
    nmBinPath: lazyNmBinPath,
    rootBinPath: lazyRootBinPath,
    rootDistPath: lazyRootDistPath,
    rootPath: lazyRootPath,
    rootPkgJsonPath: lazyRootPkgJsonPath,
    shadowBinPath: lazyShadowBinPath,
    zshRcPath: lazyZshRcPath
  },
  internals: {
    getSentry() {
      return _Sentry;
    },
    setSentry(Sentry) {
      if (_Sentry === undefined) {
        _Sentry = Sentry;
        return true;
      }
      return false;
    }
  },
  mixin: registryConstants
});

module.exports = constants;
//# debugId=23cb1c1d-7228-4cb4-ad0d-9b5e4a38c195
//# sourceMappingURL=constants.js.map
