/// <reference types="node" />
import registryConstants from '@socketsecurity/registry/lib/constants';
import { Remap } from '@socketsecurity/registry/lib/objects';
type RegistryEnv = typeof registryConstants.ENV;
type RegistryInternals = (typeof registryConstants)['Symbol(kInternalsSymbol)'];
type Sentry = any;
type Internals = Remap<Omit<RegistryInternals, 'getIPC'> & Readonly<{
    getIPC: {
        (): Promise<IPC>;
        <K extends keyof IPC | undefined>(key?: K | undefined): Promise<K extends keyof IPC ? IPC[K] : IPC>;
    };
    getSentry: () => Sentry;
    setSentry(Sentry: Sentry): boolean;
}>>;
type ENV = Remap<RegistryEnv & Readonly<{
    SOCKET_CLI_DEBUG: boolean;
    SOCKET_CLI_LEGACY_BUILD: boolean;
    SOCKET_CLI_NO_API_TOKEN: boolean;
    SOCKET_CLI_PUBLISHED_BUILD: boolean;
    SOCKET_CLI_SENTRY_BUILD: boolean;
    SOCKET_CLI_SHOW_BANNER: boolean;
    SOCKET_CLI_VERSION_HASH: string;
}>>;
type IPC = Readonly<{
    SOCKET_CLI_FIX?: string | undefined;
    SOCKET_CLI_OPTIMIZE?: boolean | undefined;
    SOCKET_CLI_SAFE_WRAPPER?: number | undefined;
}>;
declare const constants: {
    readonly CI: "CI";
    readonly [kInternalsSymbol]: registryConstants.Internals;
    readonly NODE_MODULES: "node_modules";
    readonly NPM: "npm";
    readonly NPX: "npx";
    readonly PACKAGE_JSON: "package.json";
    readonly SOCKET_SECURITY_SCOPE: "@socketsecurity";
    readonly kInternalsSymbol: unique symbol;
    readonly NODE_AUTH_TOKEN: "NODE_AUTH_TOKEN";
    readonly NODE_ENV: "NODE_ENV";
    readonly PRE_COMMIT: "PRE_COMMIT";
    readonly TAP: "TAP";
    readonly VITEST: "VITEST";
    readonly AT_LATEST: "@latest";
    readonly BIOME_JSON: "biome.json";
    readonly COLUMN_LIMIT: 80;
    readonly EMPTY_FILE: "/* empty */\n";
    readonly ESLINT_CONFIG_JS: "eslint.config.js";
    readonly ESNEXT: "esnext";
    readonly EXTENSIONS: "extensions";
    readonly EXTENSIONS_JSON: "extensions.json";
    readonly GIT_IGNORE: ".gitignore";
    readonly LATEST: "latest";
    readonly LICENSE: "LICENSE";
    readonly LICENSE_GLOB: "LICEN[CS]E{[.-]*,}";
    readonly LICENSE_GLOB_RECURSIVE: "**/LICEN[CS]E{[.-]*,}";
    readonly LICENSE_ORIGINAL: "LICENSE.original";
    readonly LICENSE_ORIGINAL_GLOB: "*.original{.*,}";
    readonly LICENSE_ORIGINAL_GLOB_RECURSIVE: "**/*.original{.*,}";
    readonly LOOP_SENTINEL: 1000000;
    readonly MANIFEST_JSON: "manifest.json";
    readonly MIT: "MIT";
    readonly NODE_MODULES_GLOB_RECURSIVE: "**/node_modules";
    readonly NODE_WORKSPACES: "node_workspaces";
    readonly NODE_VERSION: string;
    readonly OVERRIDES: "overrides";
    readonly PACKAGE_DEFAULT_SOCKET_CATEGORIES: readonly ["cleanup"];
    readonly PACKAGE_DEFAULT_NODE_RANGE: string;
    readonly PACKAGE_DEFAULT_VERSION: "1.0.0";
    readonly PACKAGE_LOCK: "package-lock.json";
    readonly README_GLOB: "README{.*,}";
    readonly README_GLOB_RECURSIVE: "**/README{.*,}";
    readonly README_MD: "README.md";
    readonly REGISTRY: "registry";
    readonly REGISTRY_SCOPE_DELIMITER: "__";
    readonly RESOLUTIONS: "resolutions";
    readonly SOCKET_GITHUB_ORG: "SocketDev";
    readonly SOCKET_IPC_HANDSHAKE: "SOCKET_IPC_HANDSHAKE";
    readonly SOCKET_OVERRIDE_SCOPE: "@socketoverride";
    readonly SOCKET_PUBLIC_API_KEY: string;
    readonly SOCKET_PUBLIC_API_TOKEN: string;
    readonly SOCKET_REGISTRY_NPM_ORG: "socketregistry";
    readonly SOCKET_REGISTRY_PACKAGE_NAME: "@socketsecurity/registry";
    readonly SOCKET_REGISTRY_REPO_NAME: "socket-registry";
    readonly SOCKET_REGISTRY_SCOPE: "@socketregistry";
    readonly SUPPORTS_NODE_DISABLE_WARNING_FLAG: boolean;
    readonly SUPPORTS_NODE_REQUIRE_MODULE: boolean;
    readonly SUPPORTS_NODE_RUN: boolean;
    readonly SUPPORTS_PROCESS_SEND: boolean;
    readonly TEMPLATE_CJS: "cjs";
    readonly TEMPLATE_CJS_BROWSER: "cjs-browser";
    readonly TEMPLATE_CJS_ESM: "cjs-esm";
    readonly TEMPLATE_ES_SHIM_CONSTRUCTOR: "es-shim-constructor";
    readonly TEMPLATE_ES_SHIM_PROTOTYPE_METHOD: "es-shim-prototype-method";
    readonly TEMPLATE_ES_SHIM_STATIC_METHOD: "es-shim-static-method";
    readonly TSCONFIG_JSON: "tsconfig.json";
    readonly UNDEFINED_TOKEN: {};
    readonly UNLICENCED: "UNLICENCED";
    readonly UNLICENSED: "UNLICENSED";
    readonly WIN32: boolean;
    readonly abortController: AbortController;
    readonly abortSignal: AbortSignal;
    readonly copyLeftLicenses: ReadonlySet<string>;
    readonly execPath: string;
    readonly ignoreGlobs: readonly ["**/.git", "**/.npmrc", "**/bun.lockb?", "**/node_modules", "**/package-lock.json", "**/pnpm-lock.ya?ml", "**/yarn.lock", "**/.DS_Store", "**/.gitignore", "**/.hg", "**/.lock-wscript", "**/.npmignore", "**/.svn", "**/.wafpickle-*", "**/.*.swp", "**/._*/**", "**/archived-packages/**", "**/build/config.gypi", "**/CVS", "**/npm-debug.log", "**/*.orig", "**/.env", "**/.eslintcache", "**/.nvm", "**/.tap", "**/.tapci.yaml", "**/.vscode", "**/*.tsbuildinfo", "**/Thumbs.db"];
    readonly lifecycleScriptNames: ReadonlySet<string>;
    readonly maintainedNodeVersions: registryConstants.MaintainedNodeVersions;
    readonly nodeNoWarningsFlags: readonly string[];
    readonly npmExecPath: string;
    readonly packageExtensions: readonly [string, object][];
    readonly packumentCache: Map<unknown, unknown>;
    readonly pacoteCachePath: string;
    readonly parseArgsConfig: registryConstants.ParseArgsConfig;
    readonly skipTestsByEcosystem: Readonly<Record<string, ReadonlySet<string>>>;
    readonly spinner: {
        clear: () => import("@socketregistry/yocto-spinner/index.cjs").Spinner;
        color: import("@socketregistry/yocto-spinner/index.cjs").Color;
        text: string;
        readonly isSpinning: boolean;
        error: (text?: string | undefined, ...extras: any[]) => any;
        errorAndStop: (text?: string | undefined, ...extras: any[]) => any;
        fail: (text?: string | undefined, ...extras: any[]) => any;
        failAndStop: (text?: string | undefined, ...extras: any[]) => any;
        getText: () => string;
        info: (text?: string | undefined, ...extras: any[]) => any;
        infoAndStop: (text?: string | undefined, ...extras: any[]) => any;
        log: (text?: string | undefined, ...extras: any[]) => any;
        logAndStop: (text?: string | undefined, ...extras: any[]) => any;
        setText: (text?: string | undefined) => any;
        start: (text?: string | undefined, ...extras: any[]) => any;
        stop: (finalText?: string | undefined, ...extras: any[]) => any;
        success: (text?: string | undefined, ...extras: any[]) => any;
        successAndStop: (text?: string | undefined, ...extras: any[]) => any;
        warn: (text?: string | undefined, ...extras: any[]) => any;
        warnAndStop: (text?: string | undefined, ...extras: any[]) => any;
        warning: (text?: string | undefined, ...extras: any[]) => any;
        warningAndStop: (text?: string | undefined, ...extras: any[]) => any;
    };
    readonly tsLibsAvailable: ReadonlySet<string>;
    readonly tsTypesAvailable: ReadonlySet<string>;
    readonly win32EnsureTestsByEcosystem: Readonly<Record<string, ReadonlySet<string>>>;
    readonly 'Symbol(kInternalsSymbol)': Internals;
    readonly ALERT_TYPE_CRITICAL_CVE: 'criticalCVE';
    readonly ALERT_TYPE_CVE: 'cve';
    readonly ALERT_TYPE_MEDIUM_CVE: 'mediumCVE';
    readonly ALERT_TYPE_MILD_CVE: 'mildCVE';
    readonly ALERT_TYPE_SOCKET_UPGRADE_AVAILABLE: 'socketUpgradeAvailable';
    readonly API_V0_URL: 'https://api.socket.dev/v0';
    readonly BATCH_PURL_ENDPOINT: 'https://api.socket.dev/v0/purl?alerts=true&compact=true';
    readonly BINARY_LOCK_EXT: '.lockb';
    readonly BUN: 'bun';
    readonly CLI: 'cli';
    readonly CVE_ALERT_PROPS_FIRST_PATCHED_VERSION_IDENTIFIER: 'firstPatchedVersionIdentifier';
    readonly CVE_ALERT_PROPS_VULNERABLE_VERSION_RANGE: 'vulnerableVersionRange';
    readonly ENV: ENV;
    readonly DIST_TYPE: 'module-sync' | 'require';
    readonly DRY_RUN_LABEL: '[DryRun]';
    readonly DRY_RUN_BAIL_TEXT: '[DryRun] Bailing now';
    readonly IPC: IPC;
    readonly LOCK_EXT: '.lock';
    readonly MODULE_SYNC: 'module-sync';
    readonly NPM_REGISTRY_URL: 'https://registry.npmjs.org';
    readonly PNPM: 'pnpm';
    readonly REDACTED: '<redacted>';
    readonly REQUIRE: 'require';
    readonly SHADOW_NPM_BIN: 'shadow-bin';
    readonly SHADOW_NPM_INJECT: 'shadow-npm-inject';
    readonly SHADOW_NPM_PATHS: 'shadow-npm-paths';
    readonly SOCKET: 'socket';
    readonly SOCKET_CLI_BIN_NAME: 'socket';
    readonly SOCKET_CLI_BIN_NAME_ALIAS: 'cli';
    readonly SOCKET_CLI_DEBUG: 'SOCKET_CLI_DEBUG';
    readonly SOCKET_CLI_FIX: 'SOCKET_CLI_FIX';
    readonly SOCKET_CLI_ISSUES_URL: 'https://github.com/SocketDev/socket-cli/issues';
    readonly SOCKET_CLI_SENTRY_BIN_NAME_ALIAS: 'cli-with-sentry';
    readonly SOCKET_CLI_LEGACY_BUILD: 'SOCKET_CLI_LEGACY_BUILD';
    readonly SOCKET_CLI_LEGACY_PACKAGE_NAME: '@socketsecurity/cli';
    readonly SOCKET_CLI_NO_API_TOKEN: 'SOCKET_CLI_NO_API_TOKEN';
    readonly SOCKET_CLI_NPM_BIN_NAME: 'socket-npm';
    readonly SOCKET_CLI_NPX_BIN_NAME: 'socket-npx';
    readonly SOCKET_CLI_OPTIMIZE: 'SOCKET_CLI_OPTIMIZE';
    readonly SOCKET_CLI_PACKAGE_NAME: 'socket';
    readonly SOCKET_CLI_PUBLISHED_BUILD: 'SOCKET_CLI_PUBLISHED_BUILD';
    readonly SOCKET_CLI_SAFE_WRAPPER: 'SOCKET_CLI_SAFE_WRAPPER';
    readonly SOCKET_CLI_SENTRY_BIN_NAME: 'socket-with-sentry';
    readonly SOCKET_CLI_SENTRY_BUILD: 'SOCKET_CLI_SENTRY_BUILD';
    readonly SOCKET_CLI_SENTRY_NPM_BIN_NAME: 'socket-npm-with-sentry';
    readonly SOCKET_CLI_SENTRY_NPX_BIN_NAME: 'socket-npx-with-sentry';
    readonly SOCKET_CLI_SENTRY_PACKAGE_NAME: '@socketsecurity/cli-with-sentry';
    readonly SOCKET_CLI_SHOW_BANNER: 'SOCKET_CLI_SHOW_BANNER';
    readonly SOCKET_CLI_VERSION_HASH: 'SOCKET_CLI_VERSION_HASH';
    readonly VLT: 'vlt';
    readonly WITH_SENTRY: 'with-sentry';
    readonly YARN: 'yarn';
    readonly YARN_BERRY: 'yarn/berry';
    readonly YARN_CLASSIC: 'yarn/classic';
    readonly bashRcPath: string;
    readonly distCliPath: string;
    readonly distInstrumentWithSentryPath: string;
    readonly distPath: string;
    readonly distShadowNpmBinPath: string;
    readonly distShadowNpmInjectPath: string;
    readonly homePath: string;
    readonly nmBinPath: string;
    readonly rootBinPath: string;
    readonly rootDistPath: string;
    readonly rootPath: string;
    readonly rootPkgJsonPath: string;
    readonly shadowBinPath: string;
    readonly zshRcPath: string;
};
export { constants as default };
