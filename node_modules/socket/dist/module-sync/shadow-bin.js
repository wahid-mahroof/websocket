'use strict';

function _socketInterop(e) {
  let c = 0
  for (const k in e ?? {}) {
    c = c === 0 && k === 'default' ? 1 : 0
    if (!c && k !== '__esModule') break
  }
  return c ? e.default : e
}

var process = require('node:process');
var npm = require('@socketsecurity/registry/lib/npm');
var spawn = require('@socketsecurity/registry/lib/spawn');
var path = require('node:path');
var cmdShim = _socketInterop(require('cmd-shim'));
var shadowNpmPaths = require('./shadow-npm-paths.js');
var constants = require('./constants.js');

const {
  CLI,
  NPX
} = constants;
async function installLinks(realBinPath, binName) {
  const isNpx = binName === NPX;
  // Find package manager being shadowed by this process.
  const binPath = isNpx ? shadowNpmPaths.getNpxBinPath() : shadowNpmPaths.getNpmBinPath();
  // Lazily access constants.WIN32.
  const {
    WIN32
  } = constants;
  // TODO: Is this early exit needed?
  if (WIN32 && binPath) {
    return binPath;
  }
  const shadowed = isNpx ? shadowNpmPaths.isNpxBinPathShadowed() : shadowNpmPaths.isNpmBinPathShadowed();
  // Move our bin directory to front of PATH so its found first.
  if (!shadowed) {
    if (WIN32) {
      await cmdShim(
      // Lazily access constants.rootDistPath.
      path.join(constants.rootDistPath, `${binName}-${CLI}.js`), path.join(realBinPath, binName));
    }
    process.env['PATH'] = `${realBinPath}${path.delimiter}${process.env['PATH']}`;
  }
  return binPath;
}

const {
  SOCKET_CLI_SAFE_WRAPPER,
  SOCKET_CLI_SENTRY_BUILD,
  SOCKET_IPC_HANDSHAKE
} = constants;
async function shadowBin(binName, args = process.argv.slice(2), level = 1) {
  process.exitCode = 1;
  const terminatorPos = args.indexOf('--');
  const binArgs = (terminatorPos === -1 ? args : args.slice(0, terminatorPos)).filter(a => !npm.isProgressFlag(a));
  const otherArgs = terminatorPos === -1 ? [] : args.slice(terminatorPos);
  const spawnPromise = spawn.spawn(
  // Lazily access constants.execPath.
  constants.execPath, [
  // Lazily access constants.nodeNoWarningsFlags.
  ...constants.nodeNoWarningsFlags,
  // Lazily access constants.ENV[SOCKET_CLI_SENTRY_BUILD].
  ...(constants.ENV[SOCKET_CLI_SENTRY_BUILD] ? ['--require',
  // Lazily access constants.distInstrumentWithSentryPath.
  constants.distInstrumentWithSentryPath] : []), '--require',
  // Lazily access constants.distShadowNpmInjectPath.
  constants.distShadowNpmInjectPath,
  // Lazily access constants.shadowBinPath.
  await installLinks(constants.shadowBinPath, binName),
  // Add `--no-progress` and `--loglevel=error` flags to fix input being
  // swallowed by the npm spinner.
  '--no-progress',
  // Add the '--loglevel=error' flag if a loglevel flag is not provided.
  ...(binArgs.some(npm.isLoglevelFlag) ? [] : ['--loglevel', 'error']), ...binArgs, ...otherArgs], {
    // 'inherit' + 'ipc'
    stdio: [0, 1, 2, 'ipc']
  });
  // See https://nodejs.org/api/all.html#all_child_process_event-exit.
  spawnPromise.process.on('exit', (code, signalName) => {
    if (signalName) {
      process.kill(process.pid, signalName);
    } else if (code !== null) {
      process.exit(code);
    }
  });
  spawnPromise.process.send({
    [SOCKET_IPC_HANDSHAKE]: {
      [SOCKET_CLI_SAFE_WRAPPER]: level
    }
  });
  await spawnPromise;
}

module.exports = shadowBin;
//# debugId=c58c4335-92d0-4ad1-86bf-6eb5428f654a
//# sourceMappingURL=shadow-bin.js.map
