/// <reference types="npmcli__arborist" />
import { SafeNode } from "./node.js";
import { SafeOverrideSet } from "./override-set.js";
import { DependencyProblem } from '@npmcli/arborist';
import { Edge as BaseEdge } from "@npmcli/arborist";
type EdgeClass = Omit<BaseEdge, 'accept' | 'detach' | 'optional' | 'overrides' | 'peer' | 'peerConflicted' | 'rawSpec' | 'reload' | 'satisfiedBy' | 'spec' | 'to'> & {
    optional: boolean;
    overrides: SafeOverrideSet | undefined;
    peer: boolean;
    peerConflicted: boolean;
    rawSpec: string;
    get accept(): string | undefined;
    get spec(): string;
    get to(): SafeNode | null;
    new (...args: any): EdgeClass;
    detach(): void;
    reload(hard?: boolean): void;
    satisfiedBy(node: SafeNode): boolean;
};
type EdgeOptions = {
    type: string;
    name: string;
    spec: string;
    from: SafeNode;
    accept?: string | undefined;
    overrides?: SafeOverrideSet | undefined;
    to?: SafeNode | undefined;
};
type ErrorStatus = DependencyProblem | 'OK';
type Explanation = {
    type: string;
    name: string;
    spec: string;
    bundled: boolean;
    overridden: boolean;
    error: ErrorStatus | undefined;
    rawSpec: string | undefined;
    from: object | undefined;
} | null;
declare const Edge: EdgeClass;
declare class SafeEdge extends Edge {
    #private;
    constructor(options: EdgeOptions);
    get bundled(): boolean;
    get error(): "DETACHED" | "MISSING" | "PEER LOCAL" | "INVALID" | null;
    get from(): SafeNode | null;
    get spec(): string;
    get to(): SafeNode | null;
    detach(): void;
    // Return the edge data, and an explanation of how that edge came to be here.
    // @ts-ignore: Edge#explain is defined with an unused `seen = []` param.
    explain(): {
        type: string;
        name: string;
        spec: string;
        bundled: boolean;
        overridden: boolean;
        error: ErrorStatus | undefined;
        rawSpec: string | undefined;
        from: object | undefined;
    };
    reload(hard?: boolean): void;
    satisfiedBy(node: SafeNode): boolean;
}
export { EdgeOptions, ErrorStatus, Explanation, Edge, SafeEdge };
