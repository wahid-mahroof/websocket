/// <reference types="npmcli__arborist" />
import { SafeNode } from "./node.js";
import { ReifyOptions } from '@npmcli/arborist';
import { Options as ArboristOptions } from "@npmcli/arborist";
import { Advisory as BaseAdvisory } from "@npmcli/arborist";
import { Arborist as BaseArborist } from "@npmcli/arborist";
import { AuditReport as BaseAuditReport } from "@npmcli/arborist";
import { Diff as BaseDiff } from "@npmcli/arborist";
type ArboristClass = ArboristInstance & {
    new (...args: any): ArboristInstance;
};
type ArboristInstance = Omit<typeof BaseArborist, 'actualTree' | 'auditReport' | 'diff' | 'idealTree' | 'reify'> & {
    auditReport?: AuditReportInstance | null | undefined;
    actualTree?: SafeNode | null | undefined;
    diff: Diff | null;
    idealTree?: SafeNode | null | undefined;
    reify(options?: ArboristReifyOptions): Promise<SafeNode>;
};
type ArboristReifyOptions = ReifyOptions & ArboristOptions;
type AuditReportInstance = Omit<BaseAuditReport, 'report'> & {
    report: {
        [dependency: string]: AuditAdvisory[];
    };
};
type AuditAdvisory = Omit<BaseAdvisory, 'id'> & {
    id: number;
    cwe: string[];
    cvss: {
        score: number;
        vectorString: string;
    };
    vulnerable_versions: string;
};
type Diff = Omit<BaseDiff, 'actual' | 'children' | 'filterSet' | 'ideal' | 'leaves' | 'removed' | 'shrinkwrapInflated' | 'unchanged'> & {
    actual: SafeNode;
    children: Diff[];
    filterSet: Set<SafeNode>;
    ideal: SafeNode;
    leaves: SafeNode[];
    parent: Diff | null;
    removed: SafeNode[];
    shrinkwrapInflated: Set<SafeNode>;
    unchanged: SafeNode[];
};
export { ArboristClass, ArboristInstance, ArboristReifyOptions, AuditReportInstance, AuditAdvisory, Diff };
