import { SafeEdge } from "./edge.js";
import { SafeNode } from "./node.js";
interface OverrideSetClass {
    children: Map<string, SafeOverrideSet>;
    key: string | undefined;
    keySpec: string | undefined;
    name: string | undefined;
    parent: SafeOverrideSet | undefined;
    value: string | undefined;
    version: string | undefined;
    new (...args: any[]): OverrideSetClass;
    get isRoot(): boolean;
    get ruleset(): Map<string, SafeOverrideSet>;
    ancestry(): Generator<SafeOverrideSet>;
    childrenAreEqual(otherOverrideSet: SafeOverrideSet | undefined): boolean;
    getEdgeRule(edge: SafeEdge): SafeOverrideSet;
    getNodeRule(node: SafeNode): SafeOverrideSet;
    getMatchingRule(node: SafeNode): SafeOverrideSet | null;
    isEqual(otherOverrideSet: SafeOverrideSet | undefined): boolean;
}
declare const OverrideSet: OverrideSetClass;
declare class SafeOverrideSet extends OverrideSet {
    // Patch adding doOverrideSetsConflict is based on
    // https://github.com/npm/cli/pull/8089.
    static doOverrideSetsConflict(first: SafeOverrideSet | undefined, second: SafeOverrideSet | undefined): boolean;
    // Patch adding findSpecificOverrideSet is based on
    // https://github.com/npm/cli/pull/8089.
    static findSpecificOverrideSet(first: SafeOverrideSet | undefined, second: SafeOverrideSet | undefined): SafeOverrideSet | undefined;
    // Patch adding childrenAreEqual is based on
    // https://github.com/npm/cli/pull/8089.
    childrenAreEqual(otherOverrideSet: SafeOverrideSet): boolean;
    getEdgeRule(edge: SafeEdge): SafeOverrideSet;
    // Patch adding isEqual is based on
    // https://github.com/npm/cli/pull/8089.
    isEqual(otherOverrideSet: SafeOverrideSet | undefined): boolean;
}
export { SafeOverrideSet };
