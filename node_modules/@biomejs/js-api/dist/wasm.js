"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Distribution = void 0;
exports.loadModule = loadModule;
exports.wrapError = wrapError;
/**
 * What kind of client Biome should use to communicate with the binary
 */
var Distribution;
(function (Distribution) {
    /**
     * Use this if you want to communicate with the WebAssembly client built for bundlers
     */
    Distribution[Distribution["BUNDLER"] = 0] = "BUNDLER";
    /**
     * Use this if you want to communicate with the WebAssembly client built for Node.JS
     */
    Distribution[Distribution["NODE"] = 1] = "NODE";
    /**
     * Use this if you want to communicate with the WebAssembly client built for the Web
     */
    Distribution[Distribution["WEB"] = 2] = "WEB";
})(Distribution || (exports.Distribution = Distribution = {}));
const isInitialized = {
    [Distribution.BUNDLER]: false,
    [Distribution.NODE]: false,
    [Distribution.WEB]: false,
};
async function loadModule(dist) {
    let modulePromise;
    switch (dist) {
        case Distribution.BUNDLER: {
            modulePromise = Promise.resolve().then(() => __importStar(require("@biomejs/wasm-bundler")));
            break;
        }
        case Distribution.NODE: {
            modulePromise = Promise.resolve().then(() => __importStar(require("@biomejs/wasm-nodejs")));
            break;
        }
        case Distribution.WEB: {
            modulePromise = Promise.resolve().then(() => __importStar(require("@biomejs/wasm-web")));
            break;
        }
    }
    const module = await modulePromise;
    if (!isInitialized[dist]) {
        isInitialized[dist] = true;
        module.main();
    }
    return module;
}
/**
 * The error generated when communicating with WebAssembly
 */
class WasmError extends Error {
    constructor(stackTrace) {
        super();
        this.stackTrace = stackTrace;
    }
    static fromError(e) {
        return new WasmError(e);
    }
}
/**
 * Creates wrap a WebAssembly error into a native JS Error
 *
 * @param e
 */
function wrapError(e) {
    return WasmError.fromError(e);
}
//# sourceMappingURL=wasm.js.map