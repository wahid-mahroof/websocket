export type SocketSdkOperations = keyof import('./types/api').operations;
export type SocketSdkReturnType<T extends keyof import("./types/api").operations> = import('./types/api-helpers').OpReturnType<import('./types/api').operations[T]>;
export type SocketSdkErrorType<T extends keyof import("./types/api").operations> = import('./types/api-helpers').OpErrorType<import('./types/api').operations[T]>;
export type SocketSdkResultType<T extends keyof import("./types/api").operations> = SocketSdkReturnType<T> | SocketSdkErrorType<T>;
export type SocketSdkOptions = {
    agent?: import("got").Agents | undefined;
    baseUrl?: string | undefined;
    userAgent?: string | undefined;
};
export function createUserAgentFromPkgJson(pkgData: {
    name: string;
    version: string;
    homepage?: string;
}): string;
export class SocketSdk {
    constructor(apiKey: string, options?: SocketSdkOptions);
    createReportFromFilePaths(filePaths: string[], pathsRelativeTo?: string, issueRules?: {
        [key: string]: boolean;
    } | undefined): Promise<SocketSdkResultType<'createReport'>>;
    getScoreByNPMPackage(pkgName: string, version: string): Promise<SocketSdkResultType<'getScoreByNPMPackage'>>;
    getIssuesByNPMPackage(pkgName: string, version: string): Promise<SocketSdkResultType<'getIssuesByNPMPackage'>>;
    getReportList(): Promise<SocketSdkResultType<'getReportList'>>;
    getReport(id: string): Promise<SocketSdkResultType<'getReport'>>;
    getReportSupportedFiles(): Promise<SocketSdkResultType<'getReportSupportedFiles'>>;
    getQuota(): Promise<SocketSdkResultType<'getQuota'>>;
    getOrganizations(): Promise<SocketSdkResultType<'getOrganizations'>>;
    getOrgAnalytics(time: string): Promise<SocketSdkResultType<'getOrgAnalytics'>>;
    getRepoAnalytics(repo: string, time: string): Promise<SocketSdkResultType<'getRepoAnalytics'>>;
    getOrgFullScanList(orgSlug: string, queryParams: {
        [key: string]: any;
    }): Promise<SocketSdkResultType<'getOrgFullScanList'>>;
    getOrgFullScan(orgSlug: string, fullScanId: string, file: string | undefined): Promise<SocketSdkResultType<'getOrgFullScan'>>;
    getOrgFullScanMetadata(orgSlug: string, fullScanId: string): Promise<SocketSdkResultType<'getOrgFullScanMetadata'>>;
    deleteOrgFullScan(orgSlug: string, fullScanId: string): Promise<SocketSdkResultType<'deleteOrgFullScan'>>;
    createOrgFullScan(orgSlug: string, queryParams: {
        [key: string]: any;
    }, filePaths: string[], pathsRelativeTo?: string): Promise<SocketSdkResultType<'CreateOrgFullScan'>>;
    getAuditLogEvents(orgSlug: string, queryParams: {
        [key: string]: any;
    }): Promise<SocketSdkResultType<'getAuditLogEvents'>>;
    getOrgRepo(orgSlug: string, repoSlug: string): Promise<SocketSdkResultType<'getOrgRepo'>>;
    deleteOrgRepo(orgSlug: string, repoSlug: string): Promise<SocketSdkResultType<'deleteOrgRepo'>>;
    getOrgRepoList(orgSlug: string, queryParams: {
        [key: string]: any;
    }): Promise<SocketSdkResultType<'getOrgRepoList'>>;
    createOrgRepo(orgSlug: string, params: {
        [key: string]: any;
    }): Promise<SocketSdkResultType<'createOrgRepo'>>;
    updateOrgRepo(orgSlug: string, repoSlug: string, params: {
        [key: string]: any;
    }): Promise<SocketSdkResultType<'updateOrgRepo'>>;
    batchPackageFetch(queryParams: {
        [key: string]: string;
    }, components: {
        components: {
            purl: string;
        }[];
    }): Promise<SocketSdkResultType<'batchPackageFetch'>>;
    searchDependencies(params: {
        [key: string]: number;
    }): Promise<SocketSdkResultType<'searchDependencies'>>;
    createDependenciesSnapshot(params: {
        [key: string]: string;
    }, filePaths: string[], pathsRelativeTo?: string): Promise<SocketSdkResultType<'createDependenciesSnapshot'>>;
    postSettings(selectors: Array<{
        organization?: string;
    }>): Promise<SocketSdkResultType<'postSettings'>>;
    getOrgSecurityPolicy(orgSlug: string): Promise<SocketSdkResultType<'getOrgSecurityPolicy'>>;
    #private;
}
//# sourceMappingURL=index.d.ts.map